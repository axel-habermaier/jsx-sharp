import fs from "fs";

export class CodeWriter {
    // To a C# or Java programmer, it might seem strange to use a regular string here that is repeatedly
    // appended to. However, JavaScript has many optimizations in place that actually make this very efficient.
    // See also: https://josephmate.github.io/java/javascript/stringbuilder/2020/07/27/javascript-does-not-need-stringbuilder.html
    #buffer = "";

    #atBeginningOfLine = true;
    #indentLevel = 0;

    constructor() {
        this.appendLine("// Generated by the JSX# compiler.");
        this.appendLine();
        this.appendLine("// ReSharper disable InconsistentNaming");
        this.appendLine("// ReSharper disable UnusedMember.Global");
        this.appendLine();
    }

    append(content: string) {
        this.#addIndentation();
        this.#buffer += content;
    }

    appendLine(content?: string) {
        if (content) {
            this.append(content);
        }

        this.#buffer += "\n";
        this.#atBeginningOfLine = true;
    }

    #addIndentation() {
        if (!this.#atBeginningOfLine) {
            return;
        }

        this.#atBeginningOfLine = false;
        for (let i = 0; i < this.#indentLevel; ++i) {
            this.#buffer += "    ";
        }
    }

    appendIndented(writer: () => void) {
        ++this.#indentLevel;
        writer();
        --this.#indentLevel;
    }

    appendSeparated<T>(items: readonly T[], separator: () => void, writer: (item: T) => void) {
        items.forEach((item, idx) => {
            writer(item);
            if (idx != items.length - 1) {
                separator();
            }
        });
    }

    // Writes the code to the given file, if necessary. If the file already exists and is up-to-date,
    // no data is written so that the down-stream C# compiler does no meaningless work.
    toFile(path: string) {
        let persistedContent = "";

        try {
            persistedContent = fs.readFileSync(path, "utf8");
        } catch (e: unknown) {
            // We don't care about this exception and just write the file.
        }

        if (persistedContent != this.#buffer) {
            fs.writeFileSync(path, this.#buffer, "utf8");
        }
    }
}
